{"mappings":"ACAA;;;;;;CAMC,EAwED,AAtEwB,CAAA,CAEvB,QAAS,OACT,eAAgB,kCAChB,cAAe,aACf,gBAAiB,2BAGjB,OAEC,GADA,IAAI,CAAC,QAAQ,CAAG,SAAS,aAAa,CAAC,IAAI,CAAC,cAAc,EACtD,CAAC,IAAI,CAAC,QAAQ,CAAE,CACnB,QAAQ,KAAK,CAAC,mCACd,MACD,CAGA,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,sBAAsB,EAAI,IAAI,CAAC,cAAc,CAGhE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAG,AAAgB,SAAhB,IAAI,CAAC,MAAM,CAGnC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAU,KACxC,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAG,OAAS,QAC/C,IAAI,CAAC,oBAAoB,EAC1B,EACD,EAGA,IAAI,wBAAyB,CAC5B,OAAO,OAAO,YAAY,EAAE,QAAQ,IAAI,CAAC,eAAe,CACzD,EAGA,IAAI,gBAAiB,CACpB,OAAO,SAAS,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,GAAK,MACrE,EAGA,IAAI,sBAAuB,CAC1B,OAAO,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAAG,OAAS,OAC7E,EAGA,IAAI,OAAO,OAAQ,CACd,AAAW,SAAX,OACH,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,oBAAoB,CAC9B,CAAA,AAAW,SAAX,QAAqB,AAAW,UAAX,MAAW,GAC1C,CAAA,IAAI,CAAC,OAAO,CAAG,MADT,EAGP,IAAI,CAAC,WAAW,EACjB,EAGA,IAAI,QAAS,CACZ,OAAO,IAAI,CAAC,OAAO,AACpB,EAGA,cACC,SAAS,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAE,IAAI,CAAC,OAAO,CACvE,EAGA,uBACC,OAAO,YAAY,EAAE,QAAQ,IAAI,CAAC,eAAe,CAAE,IAAI,CAAC,MAAM,CAC/D,CACD,CAAA,EAGgB,IAAI","sources":["<anon>","node_modules/@yohns/picocss/docs/js/SwitchColorMode.js"],"sourcesContent":["/*!\r\n * Minimal theme switcher using a checkbox\r\n *\r\n * Pico.css - https://picocss.com\r\n * Copyright 2019-2025 - Licensed under MIT\r\n * Modified by Yohn https://github.com/Yohn/PicoCSS\r\n */ const SwitchColorMode = {\n    // Config\n    _scheme: \"auto\",\n    toggleSelector: \"input[name='color-mode-toggle']\",\n    rootAttribute: \"data-theme\",\n    localStorageKey: \"picoPreferredColorScheme\",\n    // Init\n    init () {\n        this.checkbox = document.querySelector(this.toggleSelector);\n        if (!this.checkbox) {\n            console.error(\"Theme switcher toggle not found\");\n            return;\n        }\n        // If first visit, use the theme from <html> attribute; otherwise, use stored preference\n        this.scheme = this.schemeFromLocalStorage ?? this.schemeFromHTML;\n        // Set checkbox state based on the applied theme\n        this.checkbox.checked = this.scheme === \"dark\";\n        // Listen for user changes\n        this.checkbox.addEventListener(\"change\", ()=>{\n            this.scheme = this.checkbox.checked ? \"dark\" : \"light\";\n            this.schemeToLocalStorage();\n        });\n    },\n    // Get color scheme from local storage\n    get schemeFromLocalStorage () {\n        return window.localStorage?.getItem(this.localStorageKey);\n    },\n    // Get the default theme from the <html> attribute\n    get schemeFromHTML () {\n        return document.documentElement.getAttribute(this.rootAttribute) ?? \"auto\";\n    },\n    // Preferred color scheme from system\n    get preferredColorScheme () {\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    },\n    // Set scheme\n    set scheme (scheme){\n        if (scheme === \"auto\") this._scheme = this.preferredColorScheme;\n        else if (scheme === \"dark\" || scheme === \"light\") this._scheme = scheme;\n        this.applyScheme();\n    },\n    // Get scheme\n    get scheme () {\n        return this._scheme;\n    },\n    // Apply scheme\n    applyScheme () {\n        document.documentElement.setAttribute(this.rootAttribute, this._scheme);\n    },\n    // Store scheme to local storage\n    schemeToLocalStorage () {\n        window.localStorage?.setItem(this.localStorageKey, this.scheme);\n    }\n};\n// Init\nSwitchColorMode.init();\n\n//# sourceMappingURL=index.c9e8fdc9.js.map\n","/*!\r\n * Minimal theme switcher using a checkbox\r\n *\r\n * Pico.css - https://picocss.com\r\n * Copyright 2019-2025 - Licensed under MIT\r\n * Modified by Yohn https://github.com/Yohn/PicoCSS\r\n */\r\n\r\nconst SwitchColorMode = {\r\n\t// Config\r\n\t_scheme: \"auto\",\r\n\ttoggleSelector: \"input[name='color-mode-toggle']\",\r\n\trootAttribute: \"data-theme\",\r\n\tlocalStorageKey: \"picoPreferredColorScheme\",\r\n\r\n\t// Init\r\n\tinit() {\r\n\t\tthis.checkbox = document.querySelector(this.toggleSelector);\r\n\t\tif (!this.checkbox) {\r\n\t\t\tconsole.error(\"Theme switcher toggle not found\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If first visit, use the theme from <html> attribute; otherwise, use stored preference\r\n\t\tthis.scheme = this.schemeFromLocalStorage ?? this.schemeFromHTML;\r\n\r\n\t\t// Set checkbox state based on the applied theme\r\n\t\tthis.checkbox.checked = this.scheme === \"dark\";\r\n\r\n\t\t// Listen for user changes\r\n\t\tthis.checkbox.addEventListener(\"change\", () => {\r\n\t\t\tthis.scheme = this.checkbox.checked ? \"dark\" : \"light\";\r\n\t\t\tthis.schemeToLocalStorage();\r\n\t\t});\r\n\t},\r\n\r\n\t// Get color scheme from local storage\r\n\tget schemeFromLocalStorage() {\r\n\t\treturn window.localStorage?.getItem(this.localStorageKey);\r\n\t},\r\n\r\n\t// Get the default theme from the <html> attribute\r\n\tget schemeFromHTML() {\r\n\t\treturn document.documentElement.getAttribute(this.rootAttribute) ?? \"auto\";\r\n\t},\r\n\r\n\t// Preferred color scheme from system\r\n\tget preferredColorScheme() {\r\n\t\treturn window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\r\n\t},\r\n\r\n\t// Set scheme\r\n\tset scheme(scheme) {\r\n\t\tif (scheme === \"auto\") {\r\n\t\t\tthis._scheme = this.preferredColorScheme;\r\n\t\t} else if (scheme === \"dark\" || scheme === \"light\") {\r\n\t\t\tthis._scheme = scheme;\r\n\t\t}\r\n\t\tthis.applyScheme();\r\n\t},\r\n\r\n\t// Get scheme\r\n\tget scheme() {\r\n\t\treturn this._scheme;\r\n\t},\r\n\r\n\t// Apply scheme\r\n\tapplyScheme() {\r\n\t\tdocument.documentElement.setAttribute(this.rootAttribute, this._scheme);\r\n\t},\r\n\r\n\t// Store scheme to local storage\r\n\tschemeToLocalStorage() {\r\n\t\twindow.localStorage?.setItem(this.localStorageKey, this.scheme);\r\n\t},\r\n};\r\n\r\n// Init\r\nSwitchColorMode.init();"],"names":["SwitchColorMode","_scheme","toggleSelector","rootAttribute","localStorageKey","init","checkbox","document","querySelector","console","error","scheme","schemeFromLocalStorage","schemeFromHTML","checked","addEventListener","schemeToLocalStorage","window","localStorage","getItem","documentElement","getAttribute","preferredColorScheme","matchMedia","matches","applyScheme","setAttribute","setItem"],"version":3,"file":"index.c9e8fdc9.js.map"}